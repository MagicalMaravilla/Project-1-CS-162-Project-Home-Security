"""
Home Security System

Description:
This program simulates a home security system, offering features for both owners and guests.

Imports:
- datetime: Used for tracking timed settings and guest access durations.
- re: Utilized for pattern matching, especially for input validations.
- logging: Facilitates error tracking, logging access times, and recording both successful and unsuccessful attempts.

Features:
- Mandatory username and password setup on first run.
- Guest access with customizable password and duration.
- Security measures including:
  - 3 login attempts for the owner, after which the system locks out for 1 hour.
  - 10 login attempts for guests to minimize owner interventions.
- Owner override capabilities:
  - Reset guest password.
  - Extend guest access duration.
  - Return to the main menu.
- Comprehensive error handling and reporting.
- Graceful program termination via a menu option.

All functionalities loop back to the main menu for continuous operation until explicitly exited.

Author: Tony Maravilla
Date: 10/1/2023


Trial Test:
 C:/Users/tony_/Desktop/pythonProject2/HomeSecurityPassword.py
Enter your username: Tony M_
Welcome Tony M_!
Enter a 4 digit numeric password: ffff
Invalid input. Please enter a 4-digit numeric password
Enter a 4 digit numeric password: 2023
Password set successfully, welcome Tony M_ to Secure Homes Inc family. Your safety is our number one concern.

Menu:
1. Display User Info
2. Set Guest Access
3. Verify Guest Access
4. Owner Override
5. Set Guest Password
6. Guest Feature
7. Exit
Enter your choice: 2
Enter the number of days for guest access (1 - 31): 7
Do you want to set a specific time of day for access (yes/no): yes
Enter the time in HH:MM format (24-hour):1330
Invalid time format. Please use HH:MM in 24-hour format.
Do you want to set a specific time of day for access (yes/no): yes
Enter the time in HH:MM format (24-hour):13:30
Guest access granted until 2023-10-09 13:30:00

Menu:
1. Display User Info
2. Set Guest Access
3. Verify Guest Access
4. Owner Override
5. Set Guest Password
6. Guest Feature
7. Exit
Enter your choice: 5
Enter a 4 digit numeric password for guest: 1776
Guest password set successfully.

Menu:
1. Display User Info
2. Set Guest Access
3. Verify Guest Access
4. Owner Override
5. Set Guest Password
6. Guest Feature
7. Exit
Enter your choice: 6
Guest can view the current time.
Current time: 15:31:40
Guest access will expire in 6 days, 21 hours, 58 minutes, and 19 seconds.

Menu:
1. Display User Info
2. Set Guest Access
3. Verify Guest Access
4. Owner Override
5. Set Guest Password
6. Guest Feature
7. Exit
Enter your choice: 4
Enter owner password for override: 2023
Owner Override successful. Access granted.

Owner Override Menu:
1. Extend Guest Access
2. Reset Guest Password
3.Return to Main Menu
Enter your choice: 1
Enter the number of days for guest access (1 - 31): 14
Do you want to set a specific time of day for access (yes/no): no
Guest access granted until 2023-10-16 15:32:00

Owner Override Menu:
1. Extend Guest Access
2. Reset Guest Password
3.Return to Main Menu
Enter your choice: 2
Enter a 4 digit numeric password for guest: 5544
Guest password set successfully.

Owner Override Menu:
1. Extend Guest Access
2. Reset Guest Password
3.Return to Main Menu
Enter your choice: 3

Menu:
1. Display User Info
2. Set Guest Access
3. Verify Guest Access
4. Owner Override
5. Set Guest Password
6. Guest Feature
7. Exit
Enter your choice: 3
Enter guest password: 5544
Guest access granted.

Menu:
1. Display User Info
2. Set Guest Access
3. Verify Guest Access
4. Owner Override
5. Set Guest Password
6. Guest Feature
7. Exit
Enter your choice: 6
Guest can view the current time.
Current time: 15:34:05
Guest access will expire in 13 days, 23 hours, 57 minutes, and 54 seconds.

Menu:
1. Display User Info
2. Set Guest Access
3. Verify Guest Access
4. Owner Override
5. Set Guest Password
6. Guest Feature
7. Exit
Enter your choice: 1

User Information:
Username: Tony M_
Password: **** (masked for security)
Guest Experation: 2023-10-16 15:32:00
Failed Attempts: 0
System Locked Until: Not Set
Guest Access Attempts: 0

Menu:
1. Display User Info
2. Set Guest Access
3. Verify Guest Access
4. Owner Override
5. Set Guest Password
6. Guest Feature
7. Exit
Enter your choice: 7
Goodbye!

Process finished with exit code 0

"""

import datetime #used for date and time operations, example: tracking and guest access durations
import re #regular expression module for pattern matching and input validations
import logging #gives functionalities to log messages, useful for error tracking, and recording system activities

#configure the logging settings for the application
logging.basicConfig(filename='secure_password_system.log', level=logging.INFO,
                    format='%(asctime)s - %(message)s')

class SecurePasswordSystem:
    def __init__(self):
        """
        Constructor for the SecurePasswordSystem class.
        Initializes the attributes with default values
        """

        self.password = None
        self.username = None
        self.locked_until = None
        self.failed_attempts = 0
        self.guest_expiration = None
        self.guest_attempts = 0
        self.guest_password = '1969'
        logging.info('SecurePasswordSystem initialized.')

    def set_initial_username(self):
        """
        Allows the user to set their Initial username. Validates the input using regular expressions.
        """
        username_pattern = re.compile(r'^[\w\s]{1,20}$')
        #read string ( \w =a-z, A-Z, 0-9, and '_'.)(\s = Whitespace, tabs, linebreaks)({1,20} is how many characters.) ($ = ends the string match.)
        while True:
            try:
                username = input('Enter your username: ').strip()
                if not username:
                    print('Username cannot be empty. Using default username "user123".')
                    self.username = "user123"
                    print(f'Welcome {self.username}!')
                    break
                elif username_pattern.match(username):
                    self.username = username
                    print(f'Welcome {self.username}!')
                    break
                else:
                    print('Invalid username. Ensure it\'s within 20 character limit and only contains letters, numbers,'
                          ' and symbols')
            except Exception as e:
                logging.error(f"An error occurred while setting username: {e}")
                print('An unexpected error occurred. Please try again.')

    def reset_username(self):
        """
        Allows the user to reset their username after verifying their current password.
        """
        try:
            confirmation = input('Are you sure you want to reset your username? (yes/no): ')
            if confirmation.lower() != 'yes':
                print('Username reset cancelled.')
                return

            current_password = input('Enter your current password for verification: ')
            if current_password != self.password:
                print('Incorrect password. Username reset cancelled.')
                return

            final_warning = input('This action cannot be undone. Are you sure you wish to proceed? (yes/no) ')
            if final_warning.lower() == 'yes':
                print('Please set new user name.')
                self.set_initial_username()
                logging.info(f'Username reset initiated by {self.username}')
            else:
                print('Username reset cancelled')
        except Exception as e:
            logging.error(f'An error occurred while resetting username: {e}')
            print('An unexpected error occurred. Please try again.')

    def set_initial_password(self):
        """
        Allows the user to set their initial password.
        It also validates the input to ensure it's a 4 digit numeric value.
        """
        while True:
            try:
                password = input('Enter a 4 digit numeric password: ').strip()
                if not password:
                    print('Password cannot be empty. Using default password for this specific device to "1776".')
                    self.password = '1776'
                    break
                elif len(password) == 4 and password.isdigit():
                    self.password = password
                    print(f'Password set successfully, welcome {self.username} to Secure Homes Inc family. Your safety'
                          f' is our number one concern.')
                    break
                else:
                    print('Invalid input. Please enter a 4-digit numeric password')
            except Exception as e:
                logging.error(f"An error occurred while setting password: {e}")
                print('An unexpected error occurred. Please try again. ')


    def reset_password(self):
        """
        Allows the user to reset their password after confirming their intention.
        """
        confirmation = input('Are you sure you want to reset your password? (yes/no): ')
        if confirmation.lower() != 'yes':
            print('Password reset cancelled.')
            return
        final_warning = input('This action cannot be undone. Are you sure you wish to proceed? (yes/no): ')
        if final_warning.lower() == 'yes':
            print('Please set a new password.')
            self.set_initial_password()
            logging.info(f'Password reset initiated by {self.username}')
        else:
            print('Password reset cancelled.')

    def verify_password(self):
        """
        Verifies the user's password.
        If the password is incorrect, it increases the failed attempt count and may lock the system.
        """
        try:
            max_attempts = 3

            if self.locked_until and datetime.datetime.now() < self.locked_until:
                print(f'Account is locked until {self.locked_until}. Please wait.')
                return

            enter_password = input(f'{self.username}, enter your password: ')
            if enter_password == self.password:
                print('Access granted')
                self.failed_attempts = 0
                self.locked_until = None
                logging.info(f'Successful login by {self.username}.')
            else:
                self.failed_attempts += 1
                remaining_attempts = max_attempts - self.failed_attempts
                if remaining_attempts > 0:
                    print(f'Incorrect password. Try again. You have {remaining_attempts} attempts left')
                    logging.warning(f'Failed login attempt {self.failed_attempts} by {self.username}')
                self.check_failed_attempts()
        except Exception as e:
            logging.error(f'An error occurred while verifying password: {e}')
            print('An unexpected error occurred. Please try again.')

    def check_failed_attempts(self):
        """Checks the number of failed login attempts.
        If there are 3 or more failed attempts, the system will be locked for 1 hour."""
        try:
            if self.failed_attempts >= 3:
                self.locked_until = datetime.datetime.now() + datetime.timedelta(hours=1)
                print(f'Multiple failed attempts detected, {self.username}! System locked until {self.locked_until}.')
        except Exception as e:
            logging.error(f'An error occurred while checking failed attempts: {e}')
            print('An unexpected error occurred. Please try again.')

    def set_guest_access(self):
        """
        Allows the owner to set the duration and time of day for guest access.
        """
        try:
            duration = int(input('Enter the number of days for guest access (1 - 31): '))
            if not 1 <= duration <= 31:
                print('Invalid duration. Please enter a value between 1 and 31.')
                return

            while True:  # Keep asking until a valid response is given
                time_choice = input('Do you want to set a specific time of day for access (yes/no): ')
                if time_choice.lower().strip() == 'yes':
                    time_of_day = input('Enter the time in HH:MM format (24-hour):')
                    match = re.match(r'^([01]\d|2[0-3]):([0-5]\d)$', time_of_day)
                    # Using a regular expression to validate the time_of_day string.
                    # The pattern ensures that the string is in a valid 24-hour time format (HH:MM).
                    # HH can range from 00 to 23, and MM can range from 00 to 59.
                    if not match:
                        print('Invalid time format. Please use HH:MM in 24-hour format.')
                        continue  # Ask again
                    break  # Exit the loop if a valid time is provided
                elif time_choice.lower().strip() == 'no':
                    time_of_day = datetime.datetime.now().strftime('%H:%M')
                    break
                else:
                    print('Please respond with "yes" or "no".')

            # Calculate the expiration date and time
            expiration_date = datetime.datetime.now() + datetime.timedelta(days=duration)
            hour, minute = map(int, time_of_day.split(':'))
            self.guest_expiration = expiration_date.replace(hour=hour, minute=minute, second=0, microsecond=0)

            print(f'Guest access granted until {self.guest_expiration}')
        except Exception as e:
            logging.error(f'An error occurred while setting guest access: {e}')
            print('An unexpected error occurred. Please try again.')

    def verify_guest_access(self):
        """
        Verifies the guest's access using the guest password.
        Provides feedback on the remaining access time or if access has expired.
        """
        try:
            current_time = datetime.datetime.now()
            if not self.guest_expiration or current_time > self.guest_expiration:
                print('Guest access expired or not set.')
                return

            if current_time.hour >= 0 and current_time.hour < 6:
                print('Access restricted during nighttime (12 AM - 6 AM).')
                return
            if self.guest_attempts >= 10:
                print('Too many failed attempts. Guest access locked.')
                return
            guest_password = input('Enter guest password: ')
            if guest_password == self.guest_password:
                print('Guest access granted.')
                logging.info(f'Guest accessed at {current_time}.')
            else:
                self.guest_attempts += 1
                print(f'Incorrect password. you have {10 - self.guest_attempts} attempts left.')
        except Exception as e:
            logging.error(f'An error occurred while verifying guest access:{e}')
            print('An unexpected error occurred. Please try again.')

    def owner_override(self):
        """
        Allows the owner to override certain restrictions using their password.
        """
        owner_password = input('Enter owner password for override: ')
        if owner_password == self.password:
            print('Owner Override successful. Access granted.')
            logging.info(f'Owner override at {datetime.datetime.now()}.')

            while True:
                print("\nOwner Override Menu:")
                print("1. Extend Guest Access")
                print("2. Reset Guest Password")
                print("3.Return to Main Menu")

                choice = input("Enter your choice: ")

                if choice == "1":
                    self.set_guest_access()
                elif choice == "2":
                    self.set_guest_password()
                elif choice == "3":
                    break
                else:
                    print("Invalid choice. Please select a valid option.")
        else:
            print('Incorrect owner password. Access Denied')

    def set_guest_password(self):
        """
        Allows the owner to override certain restrictions using their password.
        """
        while True:
            try:
                password = input('Enter a 4 digit numeric password for guest: ').strip()
                if len(password) == 4 and password.isdigit():
                    self.guest_password = password
                    print('Guest password set successfully.')
                    break
                else:
                    print('Invalid input. Please enter a 4-digit numeric password.')
            except Exception as e:
                logging.error(f'An error occurred while setting guest password: {e}')
                print('An unexpected error occurred. Please try again.')

    def guest_feature(self):
        """Displays a feature available to guests,
        which is viewing the current time and the remaining guest access time"""
        print('Guest can view the current time.')
        print(f'Current time: {datetime.datetime.now().strftime("%H:%M:%S")}')
        if hasattr(self, 'guest_expiration'):
            #built in Python function that checks if an object has a given named attribute, and returns True if it exists, otherwise return False
            #In this code it is checking guest expiration to determine if the guest_expiration attribute has been set or not
            time_remaining = self.guest_expiration - datetime.datetime.now()
            hours, remainder = divmod(time_remaining.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            print(
                f'Guest access will expire in {time_remaining.days} days, {hours:02} hours, {minutes:02} minutes, and {seconds:02} seconds.')
        else:
            print('Guest access expiration time not set.')

    def display_info(self):
        """
        Displays the current user's information,
        including username, password (masked), and other related attributes.
        """
        print("\nUser Information:")
        print(f"Username: {self.username}")
        print(f"Password: {'*' * len(self.password)} (masked for security)")
        print(f"Guest Experation: {self.guest_expiration if self.guest_expiration else 'Not Set'}")
        print(f"Failed Attempts: {self.failed_attempts}")
        print(f"System Locked Until: {self.locked_until if self.locked_until else 'Not Set'}")
        print(f"Guest Access Attempts: {self.guest_attempts}")

    def main_menu(self):
        """
        Displays the main menu of the system, allowing the user to choose various actions.
        """
        while True:

            print("\nMenu:")
            print("1. Display User Info")
            print("2. Set Guest Access")
            print("3. Verify Guest Access")
            print("4. Owner Override")
            print("5. Set Guest Password")
            print("6. Guest Feature")
            print("7. Exit")

            choice = input("Enter your choice: ")

            if choice == "1":
                self.display_info()
            elif choice == "2":
                system.set_guest_access()
            elif choice == "3":
                system.verify_guest_access()
            elif choice == "4":
                system.owner_override()
            elif choice == "5":
                system.set_guest_password()
            elif choice == "6":
                system.guest_feature()
            elif choice == "7":
                print("Goodbye!")
                break
            else:
                print("Invalid choice. Please select a valid option.")


if __name__ == "__main__":
    """
    Main execution point of the script.
    Initializes the SecurePasswordSystem and provides access to its features.
    """
    system = SecurePasswordSystem()
    system.set_initial_username()
    system.set_initial_password()
    system.main_menu()
